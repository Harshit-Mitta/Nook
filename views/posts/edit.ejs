<% layout('/layouts/boilerplate.ejs') -%>

    <p class="display-6 mb-4">Edit Product</p>
    <form action="/posts/<%= post._id %>?_method=PUT" method="POST">
      <div class="mb-3">
        <label for="post-title" class="form-label">Post Title</label>
        <input name="name" type="text" class="form-control" id="post-title" value="<%= post.title %>">
      </div>
      <div class="mb-3">
        <label for="author" class="form-label">Author</label>
        <input name="author" type="text" class="form-control" id="author" value="<%= post.author %>">
      </div>
      <div class="mb-3">
        <label for="author" class="form-label">Likes</label>
        <input name="likes" type="text" class="form-control" id="likes" value="<%= post.likes %>">
      </div>
      <!-- <div class="mb-3">
        <label for="post-img" class="form-label">Post Image</label>
        <input name="image" type="text" class="form-control" id="post-img" value="<%= post.image %>">
      </div> -->
     
        <div class="mb-3">
      <label class="form-label">Media Files</label>
      <div class="upload-area" id="uploadArea">
        <div class="upload-content">
          <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
          <p class="mb-2">Drag & drop files here or click to browse</p>
          <p class="text-muted small">Supports: JPG, PNG, MP4, MOV (Max 50MB each, 10 files max)</p>
          <input type="file" name="media" id="mediaInput" multiple accept="image/jpeg,image/jpg,image/png,video/mp4,video/quicktime,video/mov" style="display: none;">
          <button type="button" class="btn btn-outline-primary" onclick="document.getElementById('mediaInput').click()">
            Choose Files
          </button>
        </div>
         <!-- File Preview Container -->
      <div id="filePreview" class="mt-3"></div>
      </div>
      
      <div class="mb-3">
        <label for="content" class="form-label">Content</label>
        <textarea name="content" class="form-control" id="content" rows="3"><%= post.content %></textarea>
      </div>

      <button class="btn btn-sm btn-primary">Save Post</button>
    </form>

    <style>
.upload-area {
  border: 2px dashed #dee2e6;
  border-radius: 8px;
  padding: 40px 20px;
  text-align: center;
  transition: all 0.3s ease;
  cursor: pointer;
  background-color: #f8f9fa;
}

.upload-area:hover,
.upload-area.dragover {
  border-color: #007bff;
  background-color: #e3f2fd;
}

.upload-content {
  pointer-events: none;
}

.file-preview {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 15px;
}

.preview-item {
  position: relative;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.preview-item img,
.preview-item video {
  width: 100px;
  height: 100px;
  object-fit: cover;
}

.preview-item .remove-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  background: rgba(0,0,0,0.7);
  color: white;
  border: none;
  border-radius: 50%;
  width: 25px;
  height: 25px;
  font-size: 12px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
}

.preview-item .file-info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0,0,0,0.7);
  color: white;
  padding: 5px;
  font-size: 10px;
  text-align: center;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const uploadArea = document.getElementById('uploadArea');
  const mediaInput = document.getElementById('mediaInput');
  const filePreview = document.getElementById('filePreview');
  let selectedFiles = [];

  // Drag and drop functionality
  uploadArea.addEventListener('dragover', function(e) {
    e.preventDefault();
    uploadArea.classList.add('dragover');
  });

  uploadArea.addEventListener('dragleave', function(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
  });

  uploadArea.addEventListener('drop', function(e) {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
  });

  uploadArea.addEventListener('click', function() {
    mediaInput.click();
  });

  mediaInput.addEventListener('change', function(e) {
    const files = Array.from(e.target.files);
    handleFiles(files);
  });

  function handleFiles(files) {
    // Validate files
    const validFiles = files.filter(file => {
      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'video/mp4', 'video/quicktime', 'video/mov'];
      const maxSize = 50 * 1024 * 1024; // 50MB
      
      if (!validTypes.includes(file.type)) {
        alert(`${file.name} is not a supported file type.`);
        return false;
      }
      
      if (file.size > maxSize) {
        alert(`${file.name} is too large. Maximum size is 50MB.`);
        return false;
      }
      
      return true;
    });

    // Add to selected files (max 10)
    selectedFiles = [...selectedFiles, ...validFiles].slice(0, 10);
    updateFilePreview();
    updateFileInput();
  }

  function updateFilePreview() {
    filePreview.innerHTML = '';
    
    if (selectedFiles.length === 0) return;

    selectedFiles.forEach((file, index) => {
      const previewItem = document.createElement('div');
      previewItem.className = 'preview-item';
      
      if (file.type.startsWith('image/')) {
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        previewItem.appendChild(img);
      } else if (file.type.startsWith('video/')) {
        const video = document.createElement('video');
        video.src = URL.createObjectURL(file);
        video.muted = true;
        previewItem.appendChild(video);
      }
      
      // Remove button
      const removeBtn = document.createElement('button');
      removeBtn.className = 'remove-btn';
      removeBtn.innerHTML = 'Ã—';
      removeBtn.onclick = () => removeFile(index);
      previewItem.appendChild(removeBtn);
      
      // File info
      const fileInfo = document.createElement('div');
      fileInfo.className = 'file-info';
      fileInfo.textContent = file.name;
      previewItem.appendChild(fileInfo);
      
      filePreview.appendChild(previewItem);
    });
  }

  function removeFile(index) {
    selectedFiles.splice(index, 1);
    updateFilePreview();
    updateFileInput();
  }

  function updateFileInput() {
    // Create new FileList with selected files
    const dt = new DataTransfer();
    selectedFiles.forEach(file => dt.items.add(file));
    mediaInput.files = dt.files;
  }
});
</script>